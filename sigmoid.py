{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Importing all the necessary libraries\n",
    "import numpy as np # for array math\n",
    "import matplotlib.pyplot as plt # for plotting graphs\n",
    "import math # for normal math"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-5 -4 -3 -2 -1  0  1  2  3  4  5]\n"
     ]
    }
   ],
   "source": [
    "# here we created our testing array \n",
    "x = np.array(list(range(-5,6)))\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[<matplotlib.lines.Line2D object at 0x000002AA080DE388>]\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plotting the array on the graph\n",
    "print(plt.plot(x,'ro'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Applying sigmoid function to each element of the array and then storing it to the array sig_array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.0066928509242848554, 0.01798620996209156, 0.04742587317756678, 0.11920292202211755, 0.2689414213699951, 0.5, 0.7310585786300049, 0.8807970779778823, 0.9525741268224334, 0.9820137900379085, 0.9933071490757153]\n"
     ]
    }
   ],
   "source": [
    "sig_array = [0 for u in range(len(x))]\n",
    "\n",
    "for i in range(0,len(x)):\n",
    "    sig_array[i] = (1 / (1 + math.exp(-x[i])))\n",
    "print(sig_array)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[<matplotlib.lines.Line2D object at 0x000002AA081174C8>]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plotting the final result\n",
    "print(plt.plot(sig_array))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Using Numpy you can do the following sigmoid function easily"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "a = (1 / (1 + np.exp(-x)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x2aa091b8188>]"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#If you observe, both the results are exactly same. I would recommend you to use numpy method as it is easier."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
